guides(fill = FALSE)
ggplotly(p)
states <- map_data("state")
p <- ggplot(data = states) +
geom_polygon(aes(x=long,y=lat, group = group, fill=region),color="white") +
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
states <- map_data("state")
p <- ggplot(data = states) +
geom_polygon(aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
states <- map_data("state")
p <- ggplot(data = states) +
geom_polygon(aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(aes(x=long,y=lat, group = group, fill=Maryland),color="white")
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
states <- map_data("state")
p <- ggplot(data = states) +
geom_polygon(aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(aes(x=long,y=lat, group = group, fill=Maryland),color="white") +
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
View(states)
# filtering Maryland region, where National Center for Health Statistics is located at
nchs_location <- states %>%
filter(region == 'maryland')
states <- map_data("state")
p <- ggplot(data = states) +
geom_polygon(aes(x=long,y=lat, group = group, fill=region),color="white") +
guides(fill = FALSE)
p
View(nchs_location)
# filtering Maryland region, where National Center for Health Statistics is located at
nchs_location <- states %>%
filter(region == 'maryland')
states <- map_data("state")
p <- ggplot(data = states) +
geom_polygon(aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(aes(x=long,y=lat, group = group, fill=Maryland),color="white") +
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
# filtering Maryland region, where National Center for Health Statistics is located at
nchs_location <- states %>%
filter(region == 'maryland')
states <- map_data("state")
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_location, aes(x=long,y=lat, group = group, fill=region),color="white") +
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
# filtering Maryland region, where National Center for Health Statistics is located at
nchs_region <- states %>%
filter(region == 'maryland')
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
geom_point(data = labs, aes(x=long,y=lat), color="orange", size=4)
guides(fill = FALSE) +
labs(title = "National Center for Health Statistics region")
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
geom_point(data = labs, aes(x=long,y=lat), color="orange", size=4) +
labs(title = "National Center for Health Statistics region") +
guides(fill = FALSE) +
ggplotly(p) %>% layout(showlegend = FALSE)
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
geom_point(data = labs, aes(x=long,y=lat), color="orange", size=4) +
guides(fill = FALSE) +
ggplotly(p) %>% layout(showlegend = FALSE)
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
labs(title = "National Center for Health Statistics region") +
guides(fill = FALSE) +
ggplotly(p) %>% layout(showlegend = FALSE)
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
guides(fill = FALSE) +
ggplotly(p) %>% layout(showlegend = FALSE)
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
labs(title = "National Center for Health Statistics region")
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
labs(title = "National Center for Health Statistics - Maryland")
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
labs(title = "National Center for Health Statistics - Maryland") +
theme_void()
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
labs(title = "National Center for Health Statistics - Maryland") +
theme_void()
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
# National Center for Health Statistics coordenates
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng=-76.951720,
lat=38.969450,
label="National Center for Health Statistics",
labelOptions = labelOptions(noHide=T))
m
shiny::runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
library(tidyverse) #loads ggplot, dplyr, readr
library(SASxport) #loads data in xport format - SAS
library(plotly) #builds interactive graphs
library(gifski)
library(gganimate)
library(leaflet)
trigly <- read.xport("../data/TRIGLY_I.XPT")
hdl <- read.xport("../data/HDL_I.XPT")
demo <- read.xport("../data/DEMO_I.XPT")
usa <- map_data("usa")
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
# table with risk values
table(trigly$RISK)
# joining trigly data with demographic by respondent sequence number
demo_trigly <- trigly %>%
inner_join(demo) %>%
mutate(
RIDRETH1 = case_when(
RIDRETH1 == 1 ~ "Mexican American",
RIDRETH1 == 2 ~ "Other Hispanic",
RIDRETH1 == 3 ~ "Non-Hispanic White",
RIDRETH1 == 4 ~ "Non-Hispanic Black",
RIDRETH1 == 5 ~ "Other Race"
),
RIAGENDR = case_when(
RIAGENDR == 1 ~ "Male",
RIAGENDR == 2 ~ "Female"
)
)
# table with risk values and gender
table(demo_trigly$RIAGENDR, demo_trigly$RISK)
# table with risk values and race/ethnicity
table(demo_trigly$RIDRETH1, demo_trigly$RISK)
# filtering risk
demo_trigly_risk_gender <- demo_trigly %>%
filter(RISK == 'high') %>% # setting fixed value, shiny app will use input select
group_by(RIAGENDR) %>%
summarize(count = n())
colors = c("#B80095", "#3008B1")
p <- plot_ly(demo_trigly_risk_gender, labels = ~RIAGENDR, values = ~count, type = 'pie',
marker = list(colors = colors))
p <- p %>% layout(title = 'Heart disease risk by gender',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
# filtering risk
demo_trigly_gender_race <- demo_trigly %>%
filter(RISK == 'high') # setting fixed value, shiny app will use input select
p <- ggplot(data = demo_trigly_gender_race, mapping = aes(x = RIDRETH1, fill = RIAGENDR)) +
geom_bar(position = "dodge", mapping = aes(y = ..prop.., group = RIAGENDR)) +
scale_fill_manual(values = c("#B80095", "#3008B1")) +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 25, hjust = 1)
) +
labs(title = "Heart disease risk by gender and race",
subtitle = "Risk based on LDL level",
x = "Race and Ethnicity",
y = "Risk percentage %",
fill = "Gender")
# transition_states(RIAGENDR) +
#     ease_aes('linear')
#   anim_save("../shiny/www/gganimate02.gif", animate(p))
ggplotly(p)
demo_trigly <- demo_trigly %>%
mutate(
DMDMARTL = case_when(
DMDMARTL == 1 ~ "Married",
DMDMARTL == 2 ~ "Widowed",
DMDMARTL == 3 ~ "Divorced",
DMDMARTL == 4 ~ "Separated",
DMDMARTL == 5 ~ "Never married",
DMDMARTL == 6 ~ "Living with partner"
)
)
# table marital status and heart disease risk
table(demo_trigly$DMDMARTL,demo_trigly$RISK)
# filtering risk
demo_trigly_marital <- demo_trigly %>%
group_by(DMDMARTL,RISK) %>%
summarize(count = n()) %>%
drop_na()
p <- ggplot(data = demo_trigly_marital, mapping = aes(x = reorder(DMDMARTL,-count), y = count)) +
geom_col(mapping = aes(fill = RISK)) +
coord_flip() +
scale_fill_manual(values = c("#FF3500", "#FF7D05", "#FFC300")) +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 1)
) +
labs(title = "Heart disease risk by marital status",
subtitle = "Risk based on LDL level",
x = "Marital status",
y = "Total patients",
fill = "Risk level")
# transition_reveal(count) +
#     ease_aes('linear')
#   anim_save("../shiny/www/gganimate01.gif", animate(p))
ggplotly(p)
# table marital status and heart disease risk
table(demo_trigly$DMDHREDU,demo_trigly$RISK)
demo_trigly_education <- demo_trigly %>%
filter(DMDHREDU <= 5)
p <- ggplot(data = demo_trigly_education, mapping = aes(x = DMDHREDU, y = LBDLDL)) +
geom_point(color = "#FFC300", alpha = 0.4) +
geom_smooth(size = 1.1, method = "loess", se = FALSE) +
scale_x_log10() +
theme(strip.background = element_rect(
fill="#FF7D05", size=1.5, linetype="solid"
),panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 1)
)+
facet_wrap(~RISK, ncol = 3) +
labs(x = "Education Level (1 - lowest, 5 - highest)",
y = "LDL Levels",
title = "Heart disease risk by education level",
subtitle = "Risk based on LDL level")
ggplotly(p)
table(demo_trigly$INDHHIN2)
p <- ggplot(data = demo_trigly, mapping = aes(x = INDHHIN2, fill = RISK)) +
geom_density(alpha = 0.7) +
scale_x_log10() +
scale_fill_manual(values = c("#FF3500", "#FFC300", "#FF7D05")) +
labs(x = "Annual Household Income (1 - lowest, 100 - highest)",
y = "Risk score",
title = "Heart disease risk by annual household income",
subtitle = "Risk based on LDL level")
ggplotly(p)
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
labs(title = "National Center for Health Statistics - Maryland") +
theme_void()
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
# National Center for Health Statistics coordenates
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng=-76.951720,
lat=38.969450,
label="National Center for Health Statistics",
labelOptions = labelOptions(noHide=T))
m
View(demo_trigly_marital)
library(tidyverse) #loads ggplot, dplyr, readr
library(SASxport) #loads data in xport format - SAS
library(plotly) #builds interactive graphs
library(gifski)
library(gganimate)
library(leaflet)
trigly <- read.xport("../data/TRIGLY_I.XPT")
hdl <- read.xport("../data/HDL_I.XPT")
demo <- read.xport("../data/DEMO_I.XPT")
usa <- map_data("usa")
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
# table with risk values
table(trigly$RISK)
# joining trigly data with demographic by respondent sequence number
demo_trigly <- trigly %>%
inner_join(demo) %>%
mutate(
RIDRETH1 = case_when(
RIDRETH1 == 1 ~ "Mexican American",
RIDRETH1 == 2 ~ "Other Hispanic",
RIDRETH1 == 3 ~ "Non-Hispanic White",
RIDRETH1 == 4 ~ "Non-Hispanic Black",
RIDRETH1 == 5 ~ "Other Race"
),
RIAGENDR = case_when(
RIAGENDR == 1 ~ "Male",
RIAGENDR == 2 ~ "Female"
)
)
# table with risk values and gender
table(demo_trigly$RIAGENDR, demo_trigly$RISK)
# table with risk values and race/ethnicity
table(demo_trigly$RIDRETH1, demo_trigly$RISK)
# filtering risk
demo_trigly_risk_gender <- demo_trigly %>%
filter(RISK == 'high') %>% # setting fixed value, shiny app will use input select
group_by(RIAGENDR) %>%
summarize(count = n())
colors = c("#B80095", "#3008B1")
p <- plot_ly(demo_trigly_risk_gender, labels = ~RIAGENDR, values = ~count, type = 'pie',
marker = list(colors = colors))
p <- p %>% layout(title = 'Heart disease risk by gender',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
# filtering risk
demo_trigly_gender_race <- demo_trigly %>%
filter(RISK == 'high') # setting fixed value, shiny app will use input select
p <- ggplot(data = demo_trigly_gender_race, mapping = aes(x = RIDRETH1, fill = RIAGENDR)) +
geom_bar(position = "dodge", mapping = aes(y = ..prop.., group = RIAGENDR)) +
scale_fill_manual(values = c("#B80095", "#3008B1")) +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 25, hjust = 1)
) +
labs(title = "Heart disease risk by gender and race",
subtitle = "Risk based on LDL level",
x = "Race and Ethnicity",
y = "Risk percentage %",
fill = "Gender")
# transition_states(RIAGENDR) +
#     ease_aes('linear')
#   anim_save("../shiny/www/gganimate02.gif", animate(p))
ggplotly(p)
demo_trigly <- demo_trigly %>%
mutate(
DMDMARTL = case_when(
DMDMARTL == 1 ~ "Married",
DMDMARTL == 2 ~ "Widowed",
DMDMARTL == 3 ~ "Divorced",
DMDMARTL == 4 ~ "Separated",
DMDMARTL == 5 ~ "Never married",
DMDMARTL == 6 ~ "Living with partner"
)
)
# table marital status and heart disease risk
table(demo_trigly$DMDMARTL,demo_trigly$RISK)
# filtering risk
demo_trigly_marital <- demo_trigly %>%
group_by(DMDMARTL,RISK) %>%
summarize(count = n()) %>%
drop_na()
p <- ggplot(data = demo_trigly_marital, mapping = aes(x = reorder(DMDMARTL,-count), y = count)) +
geom_col(mapping = aes(fill = RISK)) +
coord_flip() +
scale_fill_manual(values = c("#FF3500", "#FF7D05", "#FFC300")) +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 1)
) +
labs(title = "Heart disease risk by marital status",
subtitle = "Risk based on LDL level",
x = "Marital status",
y = "Total patients",
fill = "Risk level")
# transition_reveal(count) +
#     ease_aes('linear')
#   anim_save("../shiny/www/gganimate01.gif", animate(p))
ggplotly(p)
# table marital status and heart disease risk
table(demo_trigly$DMDHREDU,demo_trigly$RISK)
demo_trigly_education <- demo_trigly %>%
filter(DMDHREDU <= 5)
p <- ggplot(data = demo_trigly_education, mapping = aes(x = DMDHREDU, y = LBDLDL)) +
geom_point(color = "#FFC300", alpha = 0.4) +
geom_smooth(size = 1.1, method = "loess", se = FALSE) +
scale_x_log10() +
theme(strip.background = element_rect(
fill="#FF7D05", size=1.5, linetype="solid"
),panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, hjust = 1)
)+
facet_wrap(~RISK, ncol = 3) +
labs(x = "Education Level (1 - lowest, 5 - highest)",
y = "LDL Levels",
title = "Heart disease risk by education level",
subtitle = "Risk based on LDL level")
ggplotly(p)
table(demo_trigly$INDHHIN2)
p <- ggplot(data = demo_trigly, mapping = aes(x = INDHHIN2, fill = RISK)) +
geom_density(alpha = 0.7) +
scale_x_log10() +
scale_fill_manual(values = c("#FF3500", "#FFC300", "#FF7D05")) +
labs(x = "Annual Household Income (1 - lowest, 100 - highest)",
y = "Risk score",
title = "Heart disease risk by annual household income",
subtitle = "Risk based on LDL level")
ggplotly(p)
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
labs(title = "National Center for Health Statistics - Maryland") +
theme_void()
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
runApp('Documents/Master/CIS-546-11/rcode/final_project/shiny')
setwd("~/Documents/Master/CIS-546-11/rcode/final_project/shiny")
runApp()
runApp()
runApp()
runApp()
p <- ggplot(data = demo_trigly, mapping = aes(x = INDHHIN2, fill = RISK)) +
geom_density(alpha = 0.7) +
scale_x_log10() +
scale_fill_manual(values = c("#FF3500", "#FFC300", "#FF7D05")) +
labs(x = "Annual Household Income (1 - lowest, 100 - highest)",
y = "Risk score",
title = "Heart disease risk by annual household income",
subtitle = "Risk based on LDL level")
ggplotly(p)
runApp()
# filtering Maryland region, where National Center for Health Statistics is located at
states <- map_data("state")
nchs_region <- states %>%
filter(region == 'maryland')
p <- ggplot() +
geom_polygon(data = states, aes(x=long,y=lat, group = group, fill=region),color="white", alpha = 0.3) +
geom_polygon(data = nchs_region, aes(x=long,y=lat, group = group, fill=region),color="white") +
labs(title = "National Center for Health Statistics - Maryland") +
theme_void()
guides(fill = FALSE)
ggplotly(p) %>% layout(showlegend = FALSE)
# National Center for Health Statistics coordenates
m <- leaflet() %>%
addTiles() %>%
addMarkers(lng=-76.951720,
lat=38.969450,
label="National Center for Health Statistics",
labelOptions = labelOptions(noHide=T))
m
runApp()
runApp()
