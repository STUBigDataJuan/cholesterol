group_by(area,neighbourhood) %>%
count(area,neighbourhood,room_type,sort = TRUE,name = "total_prop")
prop_group_by_area
p <- ggplot(data = prop_group_by_area, aes(x=reorder(neighbourhood,total_prop),y=total_prop,fill=room_type)) +
geom_col(position="stack") +
scale_fill_brewer(palette="Accent") +
scale_y_continuous(labels = scales::comma) +
coord_flip() +
labs(x = "Neighbourhoods", y = "Total Properties",
title = "Total NYC AirBnB properties in Top 15 neighbourhoods",
subtitle = "Area: ",
caption = "Source: ")
ggplotly(p)
avg_price_area <- data %>%
drop_na() %>%
select(last_review,neighbourhood_group,price) %>%
group_by(last_review,neighbourhood_group) %>%
summarise(avg_price = mean(price))
avg_price_area
p <- ggplot(data = avg_price_area, aes(x=last_review,y=avg_price)) +
geom_point(aes(y=avg_price,color=avg_price)) +
geom_smooth(alpha = 0.1) +
scale_y_continuous(labels = scales::comma) +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ")
p
avg_reviews <- data %>%
drop_na() %>%
select(last_review,neighbourhood_group,number_of_reviews) %>%
group_by(last_review,neighbourhood_group) %>%
summarise(avg_price = mean(number_of_reviews))
library(tidyverse)
library(gifski)
library(plotly)
data <- read_csv("NYCAirBnB/AB_NYC_2019.csv")
glimpse(data)
prop_group_by_area <- data %>%
drop_na() %>%
select(neighbourhood_group,neighbourhood,room_type) %>%
mutate(area = neighbourhood_group) %>%
group_by(area,neighbourhood) %>%
count(area,neighbourhood,room_type,sort = TRUE,name = "total_prop")
prop_group_by_area
p <- ggplot(data = prop_group_by_area, aes(x=reorder(neighbourhood,total_prop),y=total_prop,fill=room_type)) +
geom_col(position="stack") +
scale_fill_brewer(palette="Accent") +
scale_y_continuous(labels = scales::comma) +
coord_flip() +
labs(x = "Neighbourhoods", y = "Total Properties",
title = "Total NYC AirBnB properties in Top 15 neighbourhoods",
subtitle = "Area: ",
caption = "Source: ")
ggplotly(p)
avg_price_area <- data %>%
drop_na() %>%
select(last_review,neighbourhood_group,price) %>%
group_by(last_review,neighbourhood_group) %>%
summarise(avg_price = mean(price))
avg_price_area
p <- ggplot(data = avg_price_area, aes(x=last_review,y=avg_price)) +
geom_point(aes(y=avg_price,color=avg_price)) +
geom_smooth(alpha = 0.1) +
scale_y_continuous(labels = scales::comma) +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ")
p
avg_reviews <- data %>%
drop_na() %>%
select(last_review,neighbourhood_group,number_of_reviews) %>%
group_by(last_review,neighbourhood_group) %>%
summarise(avg_price = mean(number_of_reviews))
avg_reviews
avg_reviews <- data %>%
drop_na() %>%
select(last_review,neighbourhood_group,number_of_reviews) %>%
group_by(last_review,neighbourhood_group) %>%
summarise(avg_number_of_reviews = mean(number_of_reviews))
avg_reviews
avg_reviews <- data %>%
drop_na() %>%
select(last_review,neighbourhood_group,number_of_reviews) %>%
group_by(last_review,neighbourhood_group) %>%
summarise(avg_number_of_reviews = mean(number_of_reviews))
avg_reviews
p <- ggplot(data = avg_reviews, aes(x=last_review,y=avg_number_of_reviews)) +
geom_point(aes(y=avg_number_of_reviews,color=avg_number_of_reviews)) +
geom_line() +
scale_y_continuous(labels = scales::comma) +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ")
p
p <- ggplot(data = avg_reviews, aes(x=last_review,y=avg_number_of_reviews)) +
geom_point(aes(y=avg_number_of_reviews,color=avg_number_of_reviews)) +
geom_line(color = "purple") +
scale_y_continuous(labels = scales::comma) +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ")
p
p <- ggplot(data = avg_reviews, aes(x=last_review,y=avg_number_of_reviews)) +
geom_point() +
geom_line(color = "purple") +
scale_y_continuous(labels = scales::comma) +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ")
p
shiny::runApp('Documents/Master/CIS-546-11/rcode/NYCAirBnB')
runApp('Documents/Master/CIS-546-11/rcode/NYCAirBnB')
runApp('Documents/Master/CIS-546-11/rcode/NYCAirBnB')
runApp('Documents/Master/CIS-546-11/rcode/NYCAirBnB')
p <- ggplot(data = avg_reviews, aes(x=last_review,y=avg_number_of_reviews)) +
geom_point() +
geom_line(color = "purple") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = 'month', date_labels = '%m-%d') +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ")
p
p <- ggplot(data = avg_reviews, aes(x=last_review,y=avg_number_of_reviews)) +
geom_point() +
geom_line(color = "purple") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = 'month', date_labels = '%m-%d') +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ")
p
p <- ggplot(data = avg_reviews, aes(x=last_review,y=avg_number_of_reviews)) +
geom_point() +
geom_line(color = "purple") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = 'month', date_labels = '%m') +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ")
p
p <- ggplot(data = avg_reviews, aes(x=last_review,y=avg_number_of_reviews)) +
geom_point() +
geom_line(color = "purple") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = 'month', date_labels = '%m') +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: ",
caption = "Source: ") +
transition_reveal(last_review) +
ease_aes('linear')
p
p <- ggplot(data = avg_reviews, aes(x=last_review,y=avg_number_of_reviews)) +
geom_point() +
geom_line(color = "purple") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = 'month', date_labels = '%m') +
labs(x = "Last Review Date", y = "Price per night",
title = "NYC AirBnB Price per night",
subtitle = "Date: {frame_along}",
caption = "Source: ") +
transition_reveal(last_review) +
ease_aes('linear')
p
runApp('Documents/Master/CIS-546-11/rcode/NYCAirBnB')
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
#here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
tchol <- read.xport("TCHOL_J.XPT.txt")
library(tidyverse)
library(SASxport)
tchol <- read.xport("TCHOL_J.XPT.txt")
head(tchol)
demo <- read.xport("DEMO_J.XPT.txt")
head(demo)
tchol <- read.xport("TCHOL_J.XPT.txt")
glimpse(tchol)
demo <- read.xport("DEMO_J.XPT.txt")
glimpse(demo)
setwd("~/Documents/Master/CIS-546-11/rcode/final_project")
shiny::runApp()
runApp()
runApp()
library(tidyverse)
library(SASxport)
library(tidyverse)
library(SASxport)
tchol <- read.xport("TCHOL_J.XPT")
glimpse(tchol)
demo <- read.xport("DEMO_J.XPT")
glimpse(demo)
library(tidyverse)
library(SASxport)
tchol <- read.xport("TCHOL_J.XPT")
glimpse(tchol)
demo <- read.xport("DEMO_J.XPT")
glimpse(demo)
tchol <- read.xport("TCHOL_J.XPT")
demo <- read.xport("DEMO_J.XPT")
View(demo)
View(tchol)
tchol <- read.xport("TRIGLY_I.XPT")
tchol <- read.xport("HDL_I.XPT")
tchol <- read.xport("TRIGLY_I.XPT")
trigly <- read.xport("TRIGLY_I.XPT")
hdl <- read.xport("HDL_I.XPT")
demo <- read.xport("DEMO_J.XPT")
demo <- read.xport("DEMO_I.XPT")
library(tidyverse) #needed to load ggplot, dplyr, readr
library(SASxport) #needed to load data in xport format - SAS
library(plotly)
library(tidyverse) #loads ggplot, dplyr, readr
library(SASxport) #loads data in xport format - SAS
library(plotly) #builds interactive graphs
table(trigly)
table(trigly$LBDLDL)
runApp()
runApp()
runApp()
runApp()
runApp()
table(trigly$SEQN)
stat(trigly)
boxplot(trigly)
library(tidyverse) #loads ggplot, dplyr, readr
library(SASxport) #loads data in xport format - SAS
library(plotly) #builds interactive graphs
trigly <- read.xport("TRIGLY_I.XPT")
hdl <- read.xport("HDL_I.XPT")
demo <- read.xport("DEMO_I.XPT")
boxplot(trigly)
View(demo)
View(hdl)
View(trigly)
table(trigly$LBDLDL)
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
View(trigly)
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
demo_high_risk <- trigly %>%
inner_join(demo)
View(demo_high_risk)
demo_high_risk <- trigly %>%
filter(RISK == 'high') %>%
inner_join(demo)
View(demo_high_risk)
library(tidyverse) #loads ggplot, dplyr, readr
library(SASxport) #loads data in xport format - SAS
library(plotly) #builds interactive graphs
library(tidyverse) #loads ggplot, dplyr, readr
library(SASxport) #loads data in xport format - SAS
library(plotly) #builds interactive graphs
trigly <- read.xport("TRIGLY_I.XPT")
hdl <- read.xport("HDL_I.XPT")
demo <- read.xport("DEMO_I.XPT")
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
table(stat(trigly$RISK))
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
table(summarise(trigly$RISK))
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
summarise(trigly$RISK)
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
summary(trigly$RISK)
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
describe(trigly$RISK)
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
describe(trigly)
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
summary(trigly)
trigly <- trigly %>%
mutate(
RISK = case_when(
LBDLDL <= 130 ~ "low",
LBDLDL >= 190 ~ "high",
TRUE ~ "medium"
)
)
table(trigly$RISK)
demo_risk <- trigly %>%
inner_join(demo)
View(demo_risk)
demo_risk <- trigly %>%
inner_join(demo)
table(demo_risk$RIAGENDR,demo_risk$RISK)
p <- ggplot(data = demo_risk, aes(x = RIAGENDR, y = RISK, fill = RISK)) +
geom_bar(stat = identity, position = 'stack') +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p <- ggplot(data = demo_risk, aes(x = RIAGENDR, y = RISK, fill = RISK)) +
geom_bar(stat = 'identity', position = 'stack') +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_bar(stat = 'identity', position = 'stack') +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_bar(colour="black",stat = 'identity', position = 'stack') +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_bar(stat = 'identity', position = 'stack') +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_area(stat = 'identity', position = 'stack') +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_area(stat = 'identity') +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_area() +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_line() +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_line(stat = "identity") +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_bar(stat = "identity") +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_crossbar(stat = "identity") +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_density2d(stat = "identity") +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_density2d(position = "identity") +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_col() +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_polygon() +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_polygon(stat = "identity") +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_freqpoly(stat = "bin") +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
p <- ggplot(data = demo_risk, aes(x = factor(RIAGENDR), y = RISK, fill = RISK)) +
geom_freqpoly(position = "identity") +
labs(title = "Heart disease risk by gender",
subtitle = "Risk calculated based on LDL level",
x = "Gender",
y = "Risk")
p
